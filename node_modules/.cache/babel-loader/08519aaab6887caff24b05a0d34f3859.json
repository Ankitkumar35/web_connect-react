{"ast":null,"code":"import axios from 'axios'; // import jwtDecode from 'jwt-decode'\n\nimport { toast } from 'react-toastify';\nimport { userActionTypes } from '../types';\nimport { storeAuthToken, removeAuthToken } from '../../utils/auth';\nimport setAuthToken from '../../utils/setAuthToken';\nimport toasterProps from '../../utils/toasterProps';\nimport BrowserStore from '../../utils/BrowserStore'; // Set logged in user\n\nexport const setCurrentUser = data => {\n  return {\n    type: userActionTypes.SET_CURRENT_USER,\n    payload: data\n  };\n};\nexport const setCurrentUserType = data => {\n  return {\n    type: userActionTypes.SET_CURRENT_USER_TYPE,\n    payload: data\n  };\n};\nexport const setCurrentUserToken = data => {\n  return {\n    type: userActionTypes.SET_CURRENT_USER_TOKEN,\n    payload: data\n  };\n};\nexport const handleLogin = (res, dispatch, callback, params) => {\n  const {\n    token,\n    user,\n    info\n  } = res.data;\n  BrowserStore.add('user-info', JSON.stringify(user));\n  storeAuthToken(token); // Set token to Auth header\n\n  setAuthToken(token); // Set user in LocalStorage\n\n  dispatch(setCurrentUser({ ...user,\n    ...info\n  }));\n  dispatch(setCurrentUserToken(token)); // Custom callback\n\n  callback(res); // Notify and redirect to feed\n\n  setTimeout(() => {\n    toast.success('Logged In Successfully! 😄 Redirecting ...', toasterProps());\n    setTimeout(() => {\n      var _params$redirect_to;\n\n      return window.location.pathname = (_params$redirect_to = params.redirect_to) !== null && _params$redirect_to !== void 0 ? _params$redirect_to : '/feed';\n    }, 1000);\n  }, 100);\n};\nexport const loginWithProvider = function (data) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return dispatch => {\n    handleLogin(data, dispatch, cb, params);\n  };\n};\nexport const registerUser = function (userData) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return dispatch => {\n    axios.post(process.env.REACT_APP_API_URL + '/api/v1/auth/register', userData, {\n      params,\n      headers: { ...headers,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      callback(res);\n      handleLogin(res, dispatch, callback, params);\n    }).catch(err => {\n      if (err.response && err.response.status === 419) {\n        toast.error('There was token mismatch, attempting to reload... 🤥', toasterProps());\n        setTimeout(() => window.location.reload(), 3000);\n      } else {\n        callback(err);\n        setTimeout(() => {\n          toast.error(err.response.data.message + ' 🤥', toasterProps());\n        }, 300);\n      }\n    });\n  };\n}; // Login - get user token\n\nexport const loginUser = function (userData) {\n  let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return dispatch => {\n    axios.post(process.env.REACT_APP_API_URL + '/api/v1/auth/signin', userData, {\n      params,\n      headers\n    }).then(res => handleLogin(res, dispatch, callback, params)).catch(err => {\n      toast.error(err.response.data.message + ' 🙁', toasterProps({\n        autoClose: 3000\n      }));\n      callback();\n    });\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  removeAuthToken();\n  BrowserStore.remove('user-info'); // Remove auth header for future requests\n\n  setAuthToken(false); // // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser(null));\n  dispatch(setCurrentUserToken(null)); // TODO: Call /auth/signout to logout of everywhere\n  // Notify and redirect to feed\n\n  setTimeout(() => {\n    toast.success('Logged Out Successfully. Bye, bye! 😄', toasterProps());\n    setTimeout(() => window.location.pathname = '/', 1000);\n  }, 100);\n};","map":{"version":3,"sources":["/Users/ankit/Desktop/ism-connect-web-main/src/redux/actions/auth.js"],"names":["axios","toast","userActionTypes","storeAuthToken","removeAuthToken","setAuthToken","toasterProps","BrowserStore","setCurrentUser","data","type","SET_CURRENT_USER","payload","setCurrentUserType","SET_CURRENT_USER_TYPE","setCurrentUserToken","SET_CURRENT_USER_TOKEN","handleLogin","res","dispatch","callback","params","token","user","info","add","JSON","stringify","setTimeout","success","window","location","pathname","redirect_to","loginWithProvider","cb","headers","registerUser","userData","post","process","env","REACT_APP_API_URL","then","catch","err","response","status","error","reload","message","loginUser","autoClose","logoutUser","remove"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import jwtDecode from 'jwt-decode'\nimport { toast } from 'react-toastify'\n\nimport { userActionTypes } from '../types'\nimport { storeAuthToken, removeAuthToken } from '../../utils/auth'\nimport setAuthToken from '../../utils/setAuthToken'\nimport toasterProps from '../../utils/toasterProps'\nimport BrowserStore from '../../utils/BrowserStore'\n\n// Set logged in user\nexport const setCurrentUser = (data) => {\n  return {\n    type: userActionTypes.SET_CURRENT_USER,\n    payload: data\n  }\n}\n\nexport const setCurrentUserType = (data) => {\n  return {\n    type: userActionTypes.SET_CURRENT_USER_TYPE,\n    payload: data\n  }\n}\n\nexport const setCurrentUserToken = (data) => {\n  return {\n    type: userActionTypes.SET_CURRENT_USER_TOKEN,\n    payload: data\n  }\n}\n\nexport const handleLogin = (res, dispatch, callback, params) => {\n  const { token, user, info } = res.data\n  BrowserStore.add('user-info', JSON.stringify(user))\n\n  storeAuthToken(token)\n\n  // Set token to Auth header\n  setAuthToken(token)\n\n  // Set user in LocalStorage\n  dispatch(setCurrentUser({\n    ...user, ...info\n  }))\n  dispatch(setCurrentUserToken(token))\n\n  // Custom callback\n  callback(res)\n\n  // Notify and redirect to feed\n  setTimeout(() => {\n    toast\n      .success('Logged In Successfully! 😄 Redirecting ...', toasterProps())\n    setTimeout(\n      () => (window.location.pathname = params.redirect_to ?? '/feed'), 1000)\n  }, 100)\n}\n\nexport const loginWithProvider =\n  (data, params = {}, cb = () => {}, headers = {}) => dispatch => {\n    handleLogin(data, dispatch, cb, params)\n  }\n\nexport const registerUser =\n  (userData, params = {}, callback = () => {}, headers = {}) => (dispatch) => {\n    axios\n      .post(process.env.REACT_APP_API_URL + '/api/v1/auth/register', userData, {\n        params,\n        headers: {\n          ...headers,\n          'Content-Type': 'application/json'\n        }\n      })\n      .then((res) => {\n        callback(res)\n        handleLogin(res, dispatch, callback, params)\n      })\n      .catch((err) => {\n        if (err.response && err.response.status === 419) {\n          toast.error(\n            'There was token mismatch, attempting to reload... 🤥', toasterProps())\n          setTimeout(\n            () => window.location.reload(),\n            3000\n          )\n        } else {\n          callback(err)\n          setTimeout(\n            () => { toast.error(err.response.data.message + ' 🤥', toasterProps()) },\n            300\n          )\n        }\n      })\n  }\n\n// Login - get user token\nexport const loginUser =\n  (userData, params = {}, callback = () => {}, headers = {}) => (dispatch) => {\n    axios\n      .post(process.env.REACT_APP_API_URL + '/api/v1/auth/signin', userData, { params, headers })\n      .then(res => handleLogin(res, dispatch, callback, params))\n      .catch((err) => {\n        toast.error(err.response.data.message + ' 🙁', toasterProps({ autoClose: 3000 }))\n        callback()\n      })\n  }\n\n// Log user out\nexport const logoutUser = () => (dispatch) => {\n  // Remove token from local storage\n  removeAuthToken()\n  BrowserStore.remove('user-info')\n  // Remove auth header for future requests\n  setAuthToken(false)\n  // // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser(null))\n  dispatch(setCurrentUserToken(null))\n\n  // TODO: Call /auth/signout to logout of everywhere\n\n  // Notify and redirect to feed\n  setTimeout(() => {\n    toast\n      .success('Logged Out Successfully. Bye, bye! 😄', toasterProps())\n    setTimeout(\n      () => (window.location.pathname = '/'), 1000)\n  }, 100)\n}\n"]},"metadata":{},"sourceType":"module"}