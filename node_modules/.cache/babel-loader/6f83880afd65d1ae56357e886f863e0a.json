{"ast":null,"code":"var _jsxFileName = \"/Users/ankit/Desktop/ism-connect-web-main/src/pages/Enter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport Fade from 'react-reveal/Fade';\nimport UserSignInUp from '../components/signin/UserSignInUp';\nimport { parseQuery } from '../utils/url';\nimport { loginWithProvider } from '../redux/actions/auth';\nimport '../styles/signinup/SigninupIndex.css';\nimport ismlogo from '../assets/images/campus/ismlogo.png';\nimport campus1 from '../assets/images/campus/campus1.jpg';\nimport campus2 from '../assets/images/campus/campus2.jpg';\nimport campus3 from '../assets/images/campus/campus3.jpg';\nimport campus4 from '../assets/images/campus/campus4.jpg';\nimport { isLoggedIn } from '../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Enter = props => {\n  _s();\n\n  const history = useHistory();\n  useEffect(() => {\n    const func = () => {\n      document.title = 'Enter | ISM Connect';\n      if (isLoggedIn()) history.push('/feed');\n      const query = parseQuery(window.location.href);\n\n      if (query.token) {\n        const encodedString = query.token;\n        const decodedString = atob(encodedString);\n        props.loginWithProvider({\n          data: JSON.parse(decodedString)\n        }, query);\n      }\n    };\n\n    func();\n  }, [props, history]);\n  const imagesCol = [campus1, campus2, campus3, campus4];\n  let step = 1;\n  const url = new URL(window.location.href);\n\n  for (const p of url.searchParams.entries()) {\n    if (p[0] === 'step') {\n      step = parseInt(p[1]);\n\n      if (!!step && step >= 2) {\n        step = 2;\n      } else step = 1;\n    }\n  }\n\n  const randBgImg = Math.floor(Math.random() * 4);\n  const addr = `url(${imagesCol[randBgImg]})`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ha-body\",\n    style: {\n      backgroundImage: addr\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ha-bg-cover-blue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(UserSignInUp, {\n      step: step || 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Fade, {\n      bottom: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ha-ism-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: ismlogo,\n          alt: \"Logo of IIT (ISM) Dhanbad\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Enter, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = Enter;\nEnter.propTypes = {\n  loginWithProvider: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  currentUser: state.user.currentUser\n});\n\nexport default connect(mapStateToProps, {\n  loginWithProvider\n})(Enter);\n\nvar _c;\n\n$RefreshReg$(_c, \"Enter\");","map":{"version":3,"sources":["/Users/ankit/Desktop/ism-connect-web-main/src/pages/Enter.jsx"],"names":["React","useEffect","connect","PropTypes","useHistory","Fade","UserSignInUp","parseQuery","loginWithProvider","ismlogo","campus1","campus2","campus3","campus4","isLoggedIn","Enter","props","history","func","document","title","push","query","window","location","href","token","encodedString","decodedString","atob","data","JSON","parse","imagesCol","step","url","URL","p","searchParams","entries","parseInt","randBgImg","Math","floor","random","addr","backgroundImage","propTypes","isRequired","mapStateToProps","state","currentUser","user"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { useHistory } from 'react-router-dom'\nimport Fade from 'react-reveal/Fade'\n\nimport UserSignInUp from '../components/signin/UserSignInUp'\n\nimport { parseQuery } from '../utils/url'\nimport { loginWithProvider } from '../redux/actions/auth'\n\nimport '../styles/signinup/SigninupIndex.css'\n\nimport ismlogo from '../assets/images/campus/ismlogo.png'\nimport campus1 from '../assets/images/campus/campus1.jpg'\nimport campus2 from '../assets/images/campus/campus2.jpg'\nimport campus3 from '../assets/images/campus/campus3.jpg'\nimport campus4 from '../assets/images/campus/campus4.jpg'\nimport { isLoggedIn } from '../utils/auth'\n\nconst Enter = props => {\n\tconst history = useHistory()\n\n\tuseEffect(() => {\n\t\tconst func = () => {\n\t\t\tdocument.title = 'Enter | ISM Connect'\n\n\t\t\tif (isLoggedIn()) history.push('/feed')\n\n\t\t\tconst query = parseQuery(window.location.href)\n\t\t\tif (query.token) {\n\t\t\t\tconst encodedString = query.token\n\t\t\t\tconst decodedString = atob(encodedString)\n\t\t\t\tprops.loginWithProvider({ data: JSON.parse(decodedString) }, query)\n\t\t\t}\n\t\t}\n\t\tfunc()\n\t}, [props, history])\n\n\tconst imagesCol = [\n\t\tcampus1, campus2, campus3, campus4\n\t]\n\n\tlet step = 1\n\tconst url = new URL(window.location.href)\n\tfor (const p of url.searchParams.entries()) {\n\t\tif (p[0] === 'step') {\n\t\t\tstep = parseInt(p[1])\n\t\t\tif (!!step && step >= 2) {\n\t\t\t\tstep = 2\n\t\t\t} else step = 1\n\t\t}\n\t}\n\n\tconst randBgImg = Math.floor(Math.random() * 4)\n\tconst addr = `url(${imagesCol[randBgImg]})`\n\treturn (\n\t\t<div className='ha-body' style={{ backgroundImage: addr }}>\n\t\t\t<div className='ha-bg-cover-blue' />\n\t\t\t<UserSignInUp step={step || 1} />\n\n\t\t\t<Fade bottom>\n\t\t\t\t<div className='ha-ism-logo'>\n\t\t\t\t\t<img src={ismlogo} alt='Logo of IIT (ISM) Dhanbad' />\n\t\t\t\t</div>\n\t\t\t</Fade>\n\t\t</div>\n\t)\n}\n\nEnter.propTypes = {\n\tloginWithProvider: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n\tcurrentUser: state.user.currentUser\n})\n\nexport default connect(mapStateToProps, { loginWithProvider })(Enter)\n"]},"metadata":{},"sourceType":"module"}