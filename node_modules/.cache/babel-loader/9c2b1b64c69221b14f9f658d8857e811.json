{"ast":null,"code":"var _jsxFileName = \"/Users/ankit/Desktop/ism-connect-web-main/src/components/signin/SignUpPass.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as icons from '@fortawesome/free-solid-svg-icons';\nimport '../../styles/signinup/SignInUp.css';\nimport ismconnectlogo from '../../assets/images/logos/logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignUpPass = _ref => {\n  _s();\n\n  let {\n    passwordsAreMatchingOrEmpty,\n    confirmHasBeenTouched,\n    setConfirmHasBeenTouched,\n    values,\n    setValues,\n    nextStep,\n    prevStep,\n    showPass,\n    setShowPass,\n    handleRegister,\n    allowRegister,\n    loading\n  } = _ref;\n\n  // eslint-disable-next-line no-unused-vars\n  const continueForm = e => {\n    e.preventDefault();\n    nextStep();\n  };\n\n  const backForm = e => {\n    // e.preventDefault();\n    prevStep();\n  }; // const [showPassText, setShowPassText] = useState(false);\n\n\n  const [showPassTextRem, setShowPassTextRem] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ha-form-cover\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"\",\n        className: \"ha-sign-in-up-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: ismconnectlogo,\n          alt: \"ismconnectlogo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            value: values.sUpPass,\n            onChange: e => setValues.setSUpPass(e.target.value),\n            className: \"ha-text\",\n            placeholder: \"Password\",\n            autoComplete: \"new-password\",\n            style: {\n              border: confirmHasBeenTouched && !passwordsAreMatchingOrEmpty ? '1px solid red' : ''\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: showPassTextRem ? 'text' : 'password',\n            value: values.sUpPassRem,\n            onChange: e => setValues.setSUpPassRem(e.target.value),\n            className: \"ha-text\",\n            placeholder: \"Confirm Password\",\n            autoComplete: \"new-password\",\n            onFocus: () => setConfirmHasBeenTouched(true),\n            style: {\n              border: confirmHasBeenTouched && !passwordsAreMatchingOrEmpty ? '1px solid red' : ''\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            onClick: () => {\n              setShowPassTextRem(!showPassTextRem);\n            },\n            className: \"ha-show-pass-icon\",\n            icon: showPassTextRem ? icons.faEye : icons.faEyeSlash\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ha-sign-form-btn\",\n          onClick: handleRegister,\n          disabled: !allowRegister || loading,\n          children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"grow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 24\n          }, this) : 'Create Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ha-cover-new-user\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Already Have an Account?\", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: e => backForm(e),\n            children: \" Sign In \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignUpPass, \"uJB842WjnWzHkGg9DCV4uuecEZY=\");\n\n_c = SignUpPass;\nexport default SignUpPass;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpPass\");","map":{"version":3,"sources":["/Users/ankit/Desktop/ism-connect-web-main/src/components/signin/SignUpPass.js"],"names":["useState","Spinner","FontAwesomeIcon","icons","ismconnectlogo","SignUpPass","passwordsAreMatchingOrEmpty","confirmHasBeenTouched","setConfirmHasBeenTouched","values","setValues","nextStep","prevStep","showPass","setShowPass","handleRegister","allowRegister","loading","continueForm","e","preventDefault","backForm","showPassTextRem","setShowPassTextRem","sUpPass","setSUpPass","target","value","border","sUpPassRem","setSUpPassRem","faEye","faEyeSlash"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { Spinner } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as icons from '@fortawesome/free-solid-svg-icons'\n\nimport '../../styles/signinup/SignInUp.css'\n\nimport ismconnectlogo from '../../assets/images/logos/logo.png'\n\nconst SignUpPass = ({ passwordsAreMatchingOrEmpty, confirmHasBeenTouched, setConfirmHasBeenTouched, values, setValues, nextStep, prevStep, showPass, setShowPass, handleRegister, allowRegister, loading }) => {\n  // eslint-disable-next-line no-unused-vars\n  const continueForm = (e) => {\n    e.preventDefault()\n    nextStep()\n  }\n\n  const backForm = (e) => {\n    // e.preventDefault();\n    prevStep()\n  }\n\n  // const [showPassText, setShowPassText] = useState(false);\n  const [showPassTextRem, setShowPassTextRem] = useState(false)\n\n  return (\n    <div>\n      <div className='ha-form-cover'>\n        <form action='' className='ha-sign-in-up-form'>\n          <img src={ismconnectlogo} alt='ismconnectlogo' />\n          <h1>Sign Up</h1>\n          <span>\n            <input\n              type='password'\n              value={values.sUpPass}\n              onChange={(e) => setValues.setSUpPass(e.target.value)}\n              className='ha-text'\n              placeholder='Password'\n              autoComplete='new-password'\n              style={{ border: (confirmHasBeenTouched && !passwordsAreMatchingOrEmpty ? '1px solid red' : '') }}\n            />\n          </span>\n\n          <span>\n            <input\n              type={showPassTextRem ? 'text' : 'password'}\n              value={values.sUpPassRem}\n              onChange={(e) => setValues.setSUpPassRem(e.target.value)}\n              className='ha-text'\n              placeholder='Confirm Password'\n              autoComplete='new-password'\n              onFocus={() => setConfirmHasBeenTouched(true)}\n              style={{ border: (confirmHasBeenTouched && !passwordsAreMatchingOrEmpty ? '1px solid red' : '') }}\n            />\n            <FontAwesomeIcon\n              onClick={() => { setShowPassTextRem(!showPassTextRem) }}\n              className='ha-show-pass-icon'\n              icon={showPassTextRem ? icons.faEye : icons.faEyeSlash}\n            />\n          </span>\n\n          {/* <span className=\"ha-agree-container\">\n            <input type=\"checkbox\" className=\"ha-checkbox ha-agree-checkbox\" />\n            <p className=\"ha-agree-check-text\"><b>I agree that:</b><br/> I have read and accepted the\n              <a className=\"ha-link\" href=\"/terms\" target=\"_blank\">Terms of Use.</a> <br/>See our\n              <a className=\"ha-link\" href=\"/privacy\" target=\"_blank\">Privacy Policy</a> for more details and opt-out of our service at any time.</p>\n          </span> */}\n\n          <button\n            className='ha-sign-form-btn'\n            onClick={handleRegister}\n            disabled={(!allowRegister) || loading}\n          >\n            {loading ? <Spinner animation='grow' /> : 'Create Account'}\n          </button>\n\n        </form>\n        <div className='ha-cover-new-user'>\n          <h2>Already Have an Account?\n            <span onClick={(e) => backForm(e)}> Sign In </span>\n          </h2>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SignUpPass\n"]},"metadata":{},"sourceType":"module"}