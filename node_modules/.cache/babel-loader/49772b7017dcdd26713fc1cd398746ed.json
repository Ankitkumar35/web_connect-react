{"ast":null,"code":"var _jsxFileName = \"/Users/ankit/Desktop/ism-connect-web-main/src/components/common/SuggestibleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse';\nimport '../../styles/autosuggest.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst people = [{\n  first: 'Charlie',\n  last: 'Brown',\n  twitter: 'dancounsell'\n}, {\n  first: 'Charlotte',\n  last: 'White',\n  twitter: 'mtnmissy'\n}, {\n  first: 'Chloe',\n  last: 'Jones',\n  twitter: 'ladylexy'\n}, {\n  first: 'Cooper',\n  last: 'King',\n  twitter: 'steveodom'\n}];\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n} // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.suggestion}` || `${suggestion.first} ${suggestion.last}`;\n} // Use your imagination to render suggestions.\n\n\nfunction renderSuggestion(suggestion, _ref) {\n  let {\n    query\n  } = _ref;\n  const suggestionText = `${suggestion.suggestion}` || `${suggestion.first} ${suggestion.last}`;\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: 'suggestion-content ' + suggestion.twitter,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"name\",\n      children: parts.map((part, index) => {\n        const className = part.highlight ? 'highlight' : null;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: className,\n          children: part.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\nconst SuggestibleInput = props => {\n  _s();\n\n  // console.log(props.possibleSuggestions);\n  const [suggestions, setSuggestions] = useState([]);\n  const possibleSuggestions = props.possibleSuggestions || people;\n\n  const getSuggestions = value => {\n    const escapedValue = escapeRegexCharacters(value.trim());\n\n    if (escapedValue === '') {\n      return [];\n    }\n\n    const regex = new RegExp(escapedValue, 'i');\n    return possibleSuggestions.filter(person => regex.test(getSuggestionValue(person)));\n  }; // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n\n\n  const handleSuggestionsFetchRequested = _ref2 => {\n    let {\n      value\n    } = _ref2;\n    return setSuggestions(getSuggestions(value));\n  }; // Autosuggest will call this function every time you need to clear suggestions.\n\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]); // Autosuggest will pass through all these props to the input.\n\n\n  const inputProps = {\n    placeholder: props.placeholder || '',\n    value: props.value,\n    onChange: props.handleValueChange,\n    type: props.type || 'input'\n  }; // Finally, render it!\n\n  return /*#__PURE__*/_jsxDEV(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    focusInputOnSuggestionClick: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SuggestibleInput, \"xLFRUKi5CexG/Qcuhka4a4H1SoY=\");\n\n_c = SuggestibleInput;\nexport default SuggestibleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestibleInput\");","map":{"version":3,"sources":["/Users/ankit/Desktop/ism-connect-web-main/src/components/common/SuggestibleInput.js"],"names":["useState","Autosuggest","AutosuggestHighlightMatch","AutosuggestHighlightParse","people","first","last","twitter","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","renderSuggestion","query","suggestionText","matches","parts","map","part","index","className","highlight","text","SuggestibleInput","props","suggestions","setSuggestions","possibleSuggestions","getSuggestions","value","escapedValue","trim","regex","RegExp","filter","person","test","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","inputProps","placeholder","onChange","handleValueChange","type"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport Autosuggest from 'react-autosuggest'\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match'\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse'\n\nimport '../../styles/autosuggest.css'\n\nconst people = [\n  {\n    first: 'Charlie',\n    last: 'Brown',\n    twitter: 'dancounsell'\n  },\n  {\n    first: 'Charlotte',\n    last: 'White',\n    twitter: 'mtnmissy'\n  },\n  {\n    first: 'Chloe',\n    last: 'Jones',\n    twitter: 'ladylexy'\n  },\n  {\n    first: 'Cooper',\n    last: 'King',\n    twitter: 'steveodom'\n  }\n]\n\nfunction escapeRegexCharacters (str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nfunction getSuggestionValue (suggestion) {\n  return `${suggestion.suggestion}`||`${suggestion.first} ${suggestion.last}`\n}\n\n// Use your imagination to render suggestions.\nfunction renderSuggestion (suggestion, { query }) {\n  const suggestionText = `${suggestion.suggestion}`||`${suggestion.first} ${suggestion.last}`\n  const matches = AutosuggestHighlightMatch(suggestionText, query)\n  const parts = AutosuggestHighlightParse(suggestionText, matches)\n\n  return (\n    <span className={'suggestion-content ' + suggestion.twitter}>\n      <span className='name'>\n        {\n          parts.map((part, index) => {\n            const className = part.highlight ? 'highlight' : null\n\n            return (\n              <span className={className} key={index}>{part.text}</span>\n            )\n          })\n        }\n      </span>\n    </span>\n  )\n}\n\nconst SuggestibleInput = props => {\n  // console.log(props.possibleSuggestions);\n  const [suggestions, setSuggestions] = useState([])\n\n  const possibleSuggestions = props.possibleSuggestions || people\n\n  const getSuggestions = value => {\n    const escapedValue = escapeRegexCharacters(value.trim())\n    if (escapedValue === '') {\n      return []\n    }\n    const regex = new RegExp(escapedValue, 'i')\n    return possibleSuggestions.filter(person => regex.test(getSuggestionValue(person)))\n  }\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  const handleSuggestionsFetchRequested = ({ value }) => setSuggestions(getSuggestions(value))\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  const handleSuggestionsClearRequested = () => setSuggestions([])\n\n  // Autosuggest will pass through all these props to the input.\n  const inputProps = {\n    placeholder: props.placeholder || '',\n    value: props.value,\n    onChange: props.handleValueChange,\n    type: props.type || 'input'\n  }\n\n  // Finally, render it!\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={handleSuggestionsFetchRequested}\n      onSuggestionsClearRequested={handleSuggestionsClearRequested}\n      getSuggestionValue={getSuggestionValue}\n      renderSuggestion={renderSuggestion}\n      inputProps={inputProps}\n      focusInputOnSuggestionClick\n    />\n  )\n}\n\nexport default SuggestibleInput\n"]},"metadata":{},"sourceType":"module"}