{"ast":null,"code":"var _jsxFileName = \"/Users/ankit/Desktop/ism-connect-web-main/src/components/common/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Autosuggest from 'react-autosuggest';\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse';\nimport '../../styles/autosuggest.css';\nimport axios from 'axios';\nimport BrowserStore from '../../utils/BrowserStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst people = [{\n  first: 'Charlie',\n  last: 'Brown',\n  twitter: 'dancounsell'\n}, {\n  first: 'Charlotte',\n  last: 'White',\n  twitter: 'mtnmissy'\n}, {\n  first: 'Chloe',\n  last: 'Jones',\n  twitter: 'ladylexy'\n}, {\n  first: 'Cooper',\n  last: 'King',\n  twitter: 'steveodom'\n}];\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n} // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.name}` || `${suggestion.first} ${suggestion.last}`;\n} // Use your imagination to render suggestions.\n\n\nfunction renderSuggestion(suggestion, _ref) {\n  let {\n    query\n  } = _ref;\n  const suggestionText = `${suggestion.name}` || `${suggestion.first} ${suggestion.last}`;\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: 'suggestion-content ' + suggestion.twitter,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"name\",\n      children: parts.map((part, index) => {\n        const className = part.highlight ? 'highlight' : null;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: className,\n          children: part.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\nconst SearchBar = props => {\n  _s();\n\n  const [data5, setData5] = useState({\n    loading: true,\n    arr: [],\n    flag: 0\n  });\n  if (data5.flag === 0) axios.get(\"http://127.0.0.1:8000/api/v1/suggestions\", {\n    headers: {\n      'Authorization': `Bearer ${BrowserStore.get(\"userToken\")}`\n    }\n  }).then(res => {\n    setData5({\n      loading: false,\n      arr: res.data,\n      flag: 1\n    }); // console.log(res.data);\n  }).catch(err => {\n    console.log(err);\n  });\n  const history = useHistory();\n  const [value, setValue] = useState(props.query || '');\n  const [suggestions, setSuggestions] = useState([]); // const possibleValues = props.possibleValues || people\n\n  const possibleValues = data5.loading ? people : data5.arr.user;\n\n  const handleChange = (event, _ref2) => {\n    let {\n      newValue\n    } = _ref2;\n    return setValue(newValue);\n  };\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    const pathname = '/search?q=' + value;\n    history.push(pathname);\n\n    if (props.handleResult) {\n      props.handleResult(value);\n    }\n  };\n\n  const getSuggestions = value => {\n    const escapedValue = escapeRegexCharacters(value.trim());\n\n    if (escapedValue === '') {\n      return [];\n    }\n\n    const regex = new RegExp('\\\\b' + escapedValue, 'i');\n    return possibleValues.filter(person => regex.test(getSuggestionValue(person)));\n  }; // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n\n\n  const handleSuggestionsFetchRequested = _ref3 => {\n    let {\n      value\n    } = _ref3;\n    return setSuggestions(getSuggestions(value));\n  }; // Autosuggest will call this function every time you need to clear suggestions.\n\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]); // Autosuggest will pass through all these props to the input.\n\n\n  const inputProps = {\n    placeholder: props.placeholder || 'üîç Connect with your alma mater',\n    value: value,\n    onChange: handleChange,\n    type: props.type || 'search'\n  }; // Finally, render it!\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: props.possibleSuggestions || suggestions,\n      onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n      onSuggestionsClearRequested: handleSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      focusInputOnSuggestionClick: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBar, \"K2xwCQ7w85ezdIzrZhdbga4nbCM=\", false, function () {\n  return [useHistory];\n});\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/ankit/Desktop/ism-connect-web-main/src/components/common/SearchBar.js"],"names":["useState","useHistory","Autosuggest","AutosuggestHighlightMatch","AutosuggestHighlightParse","axios","BrowserStore","people","first","last","twitter","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","name","renderSuggestion","query","suggestionText","matches","parts","map","part","index","className","highlight","text","SearchBar","props","data5","setData5","loading","arr","flag","get","headers","then","res","data","catch","err","console","log","history","value","setValue","suggestions","setSuggestions","possibleValues","user","handleChange","event","newValue","handleSubmit","ev","preventDefault","pathname","push","handleResult","getSuggestions","escapedValue","trim","regex","RegExp","filter","person","test","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","inputProps","placeholder","onChange","type","possibleSuggestions"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Autosuggest from 'react-autosuggest'\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match'\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse'\n\nimport '../../styles/autosuggest.css'\nimport axios from 'axios'\nimport BrowserStore from '../../utils/BrowserStore'\n\nconst people = [\n  {\n    first: 'Charlie',\n    last: 'Brown',\n    twitter: 'dancounsell'\n  },\n  {\n    first: 'Charlotte',\n    last: 'White',\n    twitter: 'mtnmissy'\n  },\n  {\n    first: 'Chloe',\n    last: 'Jones',\n    twitter: 'ladylexy'\n  },\n  {\n    first: 'Cooper',\n    last: 'King',\n    twitter: 'steveodom'\n  }\n]\n\nfunction escapeRegexCharacters (str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nfunction getSuggestionValue (suggestion) {\n  return `${suggestion.name}`||`${suggestion.first} ${suggestion.last}`\n}\n\n// Use your imagination to render suggestions.\nfunction renderSuggestion (suggestion, { query }) {\n  const suggestionText = `${suggestion.name}`||`${suggestion.first} ${suggestion.last}`\n  const matches = AutosuggestHighlightMatch(suggestionText, query)\n  const parts = AutosuggestHighlightParse(suggestionText, matches)\n\n  return (\n    <span className={'suggestion-content ' + suggestion.twitter}>\n      <span className='name'>\n        {\n          parts.map((part, index) => {\n            const className = part.highlight ? 'highlight' : null\n\n            return (\n              <span className={className} key={index}>{part.text}</span>\n            )\n          })\n        }\n      </span>\n    </span>\n  )\n}\n\nconst SearchBar = (props) => {\n  const [data5, setData5] = useState({\n    loading: true,\n    arr: [],\n    flag: 0\n  })\n  if(data5.flag===0)\n    axios.get(\"http://127.0.0.1:8000/api/v1/suggestions\",{headers:{\n      'Authorization': `Bearer ${BrowserStore.get(\"userToken\")}`\n    }}).then((res)=>{\n        setData5({\n          loading:false,\n          arr:res.data,\n          flag:1\n        })\n        // console.log(res.data);\n    })\n    .catch((err)=>{\n      console.log(err);\n    }) ;\n  const history = useHistory()\n\n  const [value, setValue] = useState(props.query || '')\n  const [suggestions, setSuggestions] = useState([])\n\n  // const possibleValues = props.possibleValues || people\n  const possibleValues = data5.loading?people:data5.arr.user;\n\n  const handleChange = (event, { newValue }) => setValue(newValue)\n\n  const handleSubmit = (ev) => {\n    ev.preventDefault()\n    const pathname = '/search?q=' + value\n    history.push(pathname)\n    if (props.handleResult) {\n      props.handleResult(value)\n    }\n  }\n\n  const getSuggestions = value => {\n    const escapedValue = escapeRegexCharacters(value.trim())\n    if (escapedValue === '') {\n      return []\n    }\n    const regex = new RegExp('\\\\b' + escapedValue, 'i')\n    return possibleValues.filter(person => regex.test(getSuggestionValue(person)))\n  }\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  const handleSuggestionsFetchRequested = ({ value }) => setSuggestions(getSuggestions(value))\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  const handleSuggestionsClearRequested = () => setSuggestions([])\n\n  // Autosuggest will pass through all these props to the input.\n  const inputProps = {\n    placeholder: props.placeholder || 'üîç Connect with your alma mater',\n    value: value,\n    onChange: handleChange,\n    type: props.type || 'search'\n  }\n\n  // Finally, render it!\n  return (\n    <form onSubmit={handleSubmit}>\n      <Autosuggest\n        suggestions={props.possibleSuggestions||suggestions}\n        onSuggestionsFetchRequested={handleSuggestionsFetchRequested}\n        onSuggestionsClearRequested={handleSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n        focusInputOnSuggestionClick\n      />\n    </form>\n  )\n}\n\nexport default SearchBar\n"]},"metadata":{},"sourceType":"module"}