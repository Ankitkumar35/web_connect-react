{"ast":null,"code":"var _jsxFileName = \"/Users/ankit/Desktop/ism-connect-web-main/src/components/comments/CommentsContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport CommentForm from './CommentForm';\nimport Comment from './Comment';\nimport axios from 'axios';\nimport BrowserStore from '../../utils/BrowserStore';\nimport { getComments as getCommentsApi, createComment as createCommentApi, updateComment as updateCommentApi, deleteComment as deleteCommentApi } from '../../data/comments';\nimport { isLoggedIn } from '../../utils/auth';\nimport '../../styles/comments/comments.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentsContainer = _ref => {\n  _s();\n\n  let {\n    commentsUrl,\n    currentUserId,\n    postid\n  } = _ref;\n  // var postid = 1;\n  // console.log(\"postid\");\n  // console.log(postid);\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()); // const addComment = (text, parentId) => {\n  //   createCommentApi(text, parentId).then(comment => {\n  //     setBackendComments([comment, ...backendComments])\n  //     setActiveComment(null)\n  //   })\n  // }\n\n\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId, postid).then(comment => {\n      setBackendComments(comment); // setBackendComments([comment, ...backendComments])\n\n      setActiveComment(null);\n    });\n  };\n\n  const updateComment = (text, commentId) => {\n    console.log(\"updating \" + text);\n    updateCommentApi(text, commentId, postid).then(comments => {\n      // const updatedBackendComments = backendComments.map(backendComment => {\n      //   if (backendComment.id === commentId) {\n      //     return { ...backendComment, body: text }\n      //   }\n      //   return backendComment\n      // })\n      setBackendComments(comments);\n      setActiveComment(null);\n    });\n  }; // const updateComment = (text, commentId) => {\n  //   updateCommentApi(text).then(() => {\n  //     const updatedBackendComments = backendComments.map(backendComment => {\n  //       if (backendComment.id === commentId) {\n  //         return { ...backendComment, body: text }\n  //       }\n  //       return backendComment\n  //     })\n  //     setBackendComments(updatedBackendComments)\n  //     setActiveComment(null)\n  //   })\n  // }\n\n\n  const deleteComment = commentId => {\n    if (window.confirm('Are you sure you want to remove comment?')) {\n      deleteCommentApi(commentId, postid).then(comments => {\n        // const updatedBackendComments = backendComments.filter(\n        //   backendComment => backendComment.id !== commentId\n        // )\n        setBackendComments(comments);\n      });\n    }\n  }; // const deleteComment = commentId => {\n  //   if (window.confirm('Are you sure you want to remove comment?')) {\n  //     deleteCommentApi().then(() => {\n  //       const updatedBackendComments = backendComments.filter(\n  //         backendComment => backendComment.id !== commentId\n  //       )\n  //       setBackendComments(updatedBackendComments)\n  //     })\n  //   }\n  // }\n\n\n  useEffect(() => {\n    getCommentsApi(postid).then(data => {\n      console.log(data);\n      setBackendComments(data);\n    });\n  }, []);\n  if (!isLoggedIn()) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        profileImage: rootComment.profileImage,\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        currentUserId: currentUserId // backendComments = {backendComments}\n        ,\n        getReplies: getReplies\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentsContainer, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n\n_c = CommentsContainer;\nexport default CommentsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentsContainer\");","map":{"version":3,"sources":["/Users/ankit/Desktop/ism-connect-web-main/src/components/comments/CommentsContainer.js"],"names":["useState","useEffect","CommentForm","Comment","axios","BrowserStore","getComments","getCommentsApi","createComment","createCommentApi","updateComment","updateCommentApi","deleteComment","deleteCommentApi","isLoggedIn","CommentsContainer","commentsUrl","currentUserId","postid","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","then","comment","console","log","comments","window","confirm","data","map","rootComment","profileImage","id"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\n\nimport CommentForm from './CommentForm'\nimport Comment from './Comment'\nimport axios from 'axios'\nimport BrowserStore from '../../utils/BrowserStore'\n\nimport {\n  getComments as getCommentsApi,\n  createComment as createCommentApi,\n  updateComment as updateCommentApi,\n  deleteComment as deleteCommentApi\n} from '../../data/comments'\nimport { isLoggedIn } from '../../utils/auth'\n\nimport '../../styles/comments/comments.css'\n\nconst CommentsContainer = ({ commentsUrl, currentUserId, postid }) => {\n  // var postid = 1;\n  // console.log(\"postid\");\n  // console.log(postid);\n  const [backendComments, setBackendComments] = useState([])\n  const [activeComment, setActiveComment] = useState(null)\n  const rootComments = backendComments.filter(\n    backendComment => backendComment.parentId === null\n  )\n  const getReplies = commentId =>\n    backendComments\n      .filter(backendComment => backendComment.parentId === commentId)\n      .sort(\n        (a, b) =>\n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n      )\n  // const addComment = (text, parentId) => {\n  //   createCommentApi(text, parentId).then(comment => {\n  //     setBackendComments([comment, ...backendComments])\n  //     setActiveComment(null)\n  //   })\n  // }\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId,postid).then(comment => {\n      setBackendComments(comment);\n      // setBackendComments([comment, ...backendComments])\n      setActiveComment(null)\n    })\n  }\n\n  const updateComment = (text, commentId) => {\n    console.log(\"updating \"+ text)\n    updateCommentApi(text,commentId,postid).then((comments) => {\n      // const updatedBackendComments = backendComments.map(backendComment => {\n      //   if (backendComment.id === commentId) {\n      //     return { ...backendComment, body: text }\n      //   }\n      //   return backendComment\n      // })\n      setBackendComments(comments)\n      setActiveComment(null)\n    })\n  }\n  // const updateComment = (text, commentId) => {\n  //   updateCommentApi(text).then(() => {\n  //     const updatedBackendComments = backendComments.map(backendComment => {\n  //       if (backendComment.id === commentId) {\n  //         return { ...backendComment, body: text }\n  //       }\n  //       return backendComment\n  //     })\n  //     setBackendComments(updatedBackendComments)\n  //     setActiveComment(null)\n  //   })\n  // }\n\n  const deleteComment = commentId => {\n    if (window.confirm('Are you sure you want to remove comment?')) {\n      deleteCommentApi(commentId,postid).then((comments) => {\n        // const updatedBackendComments = backendComments.filter(\n        //   backendComment => backendComment.id !== commentId\n        // )\n        setBackendComments(comments)\n      })\n    }\n  }\n  // const deleteComment = commentId => {\n  //   if (window.confirm('Are you sure you want to remove comment?')) {\n  //     deleteCommentApi().then(() => {\n  //       const updatedBackendComments = backendComments.filter(\n  //         backendComment => backendComment.id !== commentId\n  //       )\n  //       setBackendComments(updatedBackendComments)\n  //     })\n  //   }\n  // }\n\n  useEffect(() => {\n    getCommentsApi(postid).then(data => {\n      console.log(data);\n      setBackendComments(data)\n    })\n  }, [])\n\n  if (!isLoggedIn()) return null\n\n  return (\n    <div className='comments'>\n      <CommentForm handleSubmit={addComment} />\n      <div className='comments-container'>\n        {rootComments.map(rootComment => (\n          <Comment\n            profileImage={rootComment.profileImage}\n            key={rootComment.id}\n            comment={rootComment}\n            replies={getReplies(rootComment.id)}\n            activeComment={activeComment}\n            setActiveComment={setActiveComment}\n            addComment={addComment}\n            deleteComment={deleteComment}\n            updateComment={updateComment}\n            currentUserId={currentUserId}\n            // backendComments = {backendComments}\n            getReplies = {getReplies}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default CommentsContainer\n"]},"metadata":{},"sourceType":"module"}