{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport BrowserStore from './utils/BrowserStore';\nimport rootReducer from './redux/reducers/root';\nconst stateKey = 'state';\n\nconst saveToBrowserStore = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    BrowserStore.add(stateKey, serializedState);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst loadFromBrowserStore = () => {\n  try {\n    const serializedState = BrowserStore.get(stateKey);\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n};\n\nconst middlewares = [thunk, createLogger()];\nconst persistedState = loadFromBrowserStore();\nexport const store = createStore(rootReducer, persistedState, compose(applyMiddleware(...middlewares)));\nstore.subscribe(() => saveToBrowserStore(store.getState()));\nexport default store;","map":{"version":3,"sources":["/Users/ankit/Desktop/ism-connect-web-main/src/store.js"],"names":["createStore","applyMiddleware","compose","thunk","createLogger","BrowserStore","rootReducer","stateKey","saveToBrowserStore","state","serializedState","JSON","stringify","add","e","console","log","loadFromBrowserStore","get","undefined","parse","middlewares","persistedState","store","subscribe","getState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,MAAMC,QAAQ,GAAG,OAAjB;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC,MAAI;AACF,UAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAJ,IAAAA,YAAY,CAACQ,GAAb,CAAiBN,QAAjB,EAA2BG,eAA3B;AACD,GAHD,CAGE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,CAPD;;AASA,MAAMG,oBAAoB,GAAG,MAAM;AACjC,MAAI;AACF,UAAMP,eAAe,GAAGL,YAAY,CAACa,GAAb,CAAiBX,QAAjB,CAAxB;AACA,QAAIG,eAAe,KAAK,IAAxB,EAA8B,OAAOS,SAAP;AAC9B,WAAOR,IAAI,CAACS,KAAL,CAAWV,eAAX,CAAP;AACD,GAJD,CAIE,OAAOI,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAOK,SAAP;AACD;AACF,CATD;;AAWA,MAAME,WAAW,GAAG,CAAClB,KAAD,EAAQC,YAAY,EAApB,CAApB;AAEA,MAAMkB,cAAc,GAAGL,oBAAoB,EAA3C;AAEA,OAAO,MAAMM,KAAK,GAAGvB,WAAW,CAC9BM,WAD8B,EAE9BgB,cAF8B,EAG9BpB,OAAO,CAACD,eAAe,CAAC,GAAGoB,WAAJ,CAAhB,CAHuB,CAAzB;AAMPE,KAAK,CAACC,SAAN,CAAgB,MAAMhB,kBAAkB,CAACe,KAAK,CAACE,QAAN,EAAD,CAAxC;AAEA,eAAeF,KAAf","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\n\nimport BrowserStore from './utils/BrowserStore'\nimport rootReducer from './redux/reducers/root'\n\nconst stateKey = 'state'\n\nconst saveToBrowserStore = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    BrowserStore.add(stateKey, serializedState)\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nconst loadFromBrowserStore = () => {\n  try {\n    const serializedState = BrowserStore.get(stateKey)\n    if (serializedState === null) return undefined\n    return JSON.parse(serializedState)\n  } catch (e) {\n    console.log(e)\n    return undefined\n  }\n}\n\nconst middlewares = [thunk, createLogger()]\n\nconst persistedState = loadFromBrowserStore()\n\nexport const store = createStore(\n  rootReducer,\n  persistedState,\n  compose(applyMiddleware(...middlewares))\n)\n\nstore.subscribe(() => saveToBrowserStore(store.getState()))\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}